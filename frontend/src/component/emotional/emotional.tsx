import React, { useEffect, useState } from 'react';
import { Button, ConfigProvider, Input, message, Modal } from 'antd'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Ant Design
import './stylePat.css'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤
import { CreateDiaryPat, GetEmotionByPatientID, UpdateEmotionByID, DeleteEmtionByID } from '../../services/https/emotion/emotion'; // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å API
import { EmtionInterface } from '../../interfaces/emotion/IEmotion'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
import { RiEdit2Fill } from 'react-icons/ri';
import { ImBin } from 'react-icons/im';
import NavbarPat from '../navbarPat/navbarPat';


type AddEmotion = {
    ColorCode: string; // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    Emoticon: string; // ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
};

const addEmotions: AddEmotion[] = [
    // ‡πÇ‡∏Å‡∏£‡∏ò (Angry)
    { ColorCode: '#FF7171', Emoticon: 'üò°' }, // ‡πÇ‡∏Å‡∏£‡∏ò
    { ColorCode: '#FF7F7F', Emoticon: 'üò†' }, // ‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î
    { ColorCode: '#FF9090', Emoticon: 'üò§' }, // ‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç

    // ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à (Pride)
    { ColorCode: '#FFD875', Emoticon: 'üòå' }, // ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à
    { ColorCode: '#FFE798', Emoticon: 'üòä' }, // ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ

    // ‡∏™‡∏∏‡∏Ç (Happy)
    { ColorCode: '#F7E971', Emoticon: 'üòÑ' }, // ‡∏™‡∏∏‡∏Ç
    { ColorCode: '#FFEC8C', Emoticon: 'üòÇ' }, // ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞

    // ‡∏™‡∏ô‡πÉ‡∏à (Interested)
    { ColorCode: '#B7EFFF', Emoticon: 'ü§©' }, // ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô
    { ColorCode: '#A0E3FF', Emoticon: 'ü§î' }, // ‡∏™‡∏á‡∏™‡∏±‡∏¢

    // ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à (Confident)
    { ColorCode: '#94CDFF', Emoticon: 'üòé' }, // ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
    { ColorCode: '#93DBFF', Emoticon: 'üòá' }, // ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢

    // ‡∏£‡∏±‡∏Å/‡∏ä‡∏≠‡∏ö (Love)
    { ColorCode: '#FF9BCB', Emoticon: 'ü•∞' }, // ‡∏£‡∏±‡∏Å
    { ColorCode: '#FF91AE', Emoticon: 'üòò' }, // ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô
    { ColorCode: '#FAA7C0', Emoticon: 'üò≥' }, // ‡∏≠‡∏≤‡∏¢

    // ‡∏™‡∏±‡∏ô‡∏ï‡∏¥ (Peaceful)
    { ColorCode: '#ADEED5', Emoticon: 'üòå' }, // ‡∏™‡∏á‡∏ö
    { ColorCode: '#B2F3E7', Emoticon: 'üßò‚Äç‚ôÄÔ∏è' }, // ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢

    // ‡∏≠‡∏±‡∏ö‡∏≠‡∏≤‡∏¢ (Embarrassed)
    { ColorCode: '#C7F8BF', Emoticon: 'üòÖ' }, // ‡∏Å‡∏£‡∏∞‡∏≠‡∏±‡∏Å‡∏Å‡∏£‡∏∞‡∏≠‡πà‡∏ß‡∏ô

    // ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à (Sad)
    { ColorCode: '#AFDAFF', Emoticon: 'üò¢' }, // ‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à
    { ColorCode: '#97B9F0', Emoticon: 'üò≠' }, // ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ

    // ‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡πÉ‡∏à (Surprised)
    { ColorCode: '#C1E6FF', Emoticon: 'üòÆ' }, // ‡∏ï‡∏Å‡πÉ‡∏à
    { ColorCode: '#ACD6F8', Emoticon: 'üò±' }, // ‡∏ä‡πá‡∏≠‡∏Ñ

    // ‡∏Å‡∏•‡∏±‡∏ß (Fear)
    { ColorCode: '#B7C3FF', Emoticon: 'üò®' }, // ‡∏Å‡∏•‡∏±‡∏ß
    { ColorCode: '#A8B4F7', Emoticon: 'üò∞' }, // ‡∏´‡∏ß‡∏≤‡∏î‡∏´‡∏ß‡∏±‡πà‡∏ô

    // ‡∏£‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏à (Disgusted)
    { ColorCode: '#E1C6F7', Emoticon: 'üòí' }, // ‡∏£‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏à
    { ColorCode: '#B78FCB', Emoticon: 'üò©' }, // ‡∏Ç‡∏¢‡∏∞‡πÅ‡∏Ç‡∏¢‡∏á
];



const EmotionalWeb = () => { // ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    const [emotionPatients, setEmotionPatients] = useState<EmtionInterface[]>([]); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
    const [selectedEmotion, setSelectedEmotion] = useState<AddEmotion | null>(null); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const [selectedEmotionEdit, setSelectedEmotionEdit] = useState<EmtionInterface | null>(null); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const [newEmotionLabel, setNewEmotionLabel] = useState<string>(''); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Modal
    const [isModalEditOpen, setIsModalEditOpen] = useState<boolean>(false); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Modal
    const [messageApi, contextHolder] = message.useMessage();
    const [hoveredEmotionID, setHoveredEmotionID] = useState<number | null>(null);

    const patID = localStorage.getItem('patientID'); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ patientID ‡∏à‡∏≤‡∏Å localStorage

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ patientID
    const fetchEmotionPatientData = async () => {
        const res = await GetEmotionByPatientID(Number(patID)); 
        if (res) {
          setEmotionPatients(res); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡∏•‡∏á‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          console.log('Fetched emotions:', res); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        }
    };
    

    // useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchEmotionPatientData ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á
    useEffect(() => {
        fetchEmotionPatientData();
    }, []); // useEffect ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á

    useEffect(() => {
        if (isModalOpen) {
            const nameEmotionInput = document.querySelector('.nameEmotionInput') as HTMLInputElement;
            const nameEmotion = document.querySelector('.nameEmotion') as HTMLDivElement;
    
            if (nameEmotionInput && nameEmotion) {
                const updateName = () => {
                    nameEmotion.innerText = nameEmotionInput.value;
                };
                nameEmotionInput.addEventListener('input', updateName);
    
                return () => {
                    nameEmotionInput.removeEventListener('input', updateName);
                };
            }
        }
    }, [isModalOpen]);    

    const handleSelectEmotionEdit = (emotionPatients: EmtionInterface) => {
        setSelectedEmotionEdit(emotionPatients);
        setIsModalEditOpen(true);
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
    const handleSelectEmotion = (emotion: AddEmotion) => {
        setSelectedEmotion(emotion);
        setNewEmotionLabel(''); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
    };    

    const handleAddEmotion = async () => {
        if (selectedEmotion && newEmotionLabel.trim()) {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° `.trim()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏á
            const newEmotion = {
                Emoticon: selectedEmotion.Emoticon,
                ColorCode: selectedEmotion.ColorCode,
                Name: newEmotionLabel.trim(),
                PatID: patID ? Number(patID) : undefined,
            };
    
            try {
                console.log('New Emotion:', newEmotion);
                const response = await CreateDiaryPat(newEmotion);
                console.log('API Response:', response);

                if (response) {
                    messageApi.success('‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                    fetchEmotionPatientData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
                } else {
                    messageApi.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏î‡πâ');
                }
                setIsModalOpen(false);
            } catch (error) {
                console.error('Error adding emotion:', error);
                messageApi.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
            }
        } else {
            messageApi.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠');
        }
    };    
    
    const handleEditEmotion = async () => {
        if (selectedEmotionEdit && newEmotionLabel) {
            const updatedEmotion = {
                ...selectedEmotionEdit,
                Name: newEmotionLabel, // ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
            };
    
            try {
                console.log('Updating Emotion:', updatedEmotion);
                const response = await UpdateEmotionByID(updatedEmotion); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                console.log('API Response:', response);
    
                if (response) {
                    messageApi.success('‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                    fetchEmotionPatientData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API
                    setIsModalEditOpen(false); // ‡∏õ‡∏¥‡∏î Modal
                } else {
                    messageApi.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏î‡πâ');
                }
            } catch (error) {
                console.error('Error editing emotion:', error);
                messageApi.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
            }
        } else {
            messageApi.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà');
        }
    };

    const handleDeleteEmotion = async (emotionID: number | undefined) => {
        if (!emotionID) return;
        Modal.confirm({
            title: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
            onOk: async () => {
                try {
                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
                    const response = await DeleteEmtionByID(emotionID);
                    if (response) {
                        messageApi.success('‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
                        fetchEmotionPatientData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    } else {
                        messageApi.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÑ‡∏î‡πâ');
                    }
                } catch (error) {
                    console.error('Error deleting emotion:', error);
                    messageApi.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
                }
            },
            okText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
            cancelText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        });
    };
    
    

    return (
        <ConfigProvider
            theme={{
                token: {
                    colorPrimary: '#9BA5F6',
                },
            }}
        >
        <div className="emotional-web"> {/* ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å */}
        {contextHolder}
            <div className="main-bg"> {/* ‡πÅ‡∏ö‡πá‡∏Ñ‡∏Å‡∏£‡∏≤‡∏ß‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å */}
            <div className='sidebar'>
                            <NavbarPat></NavbarPat>
                        </div>
            <div className="bg-left"> {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ */}
                <div className="emotion-container">
                    <h2>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
                    <div className="emoji-grid"> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ */}
                        {emotionPatients.length === 0 ? (
                            <div 
                                style={{
                                    width: '100%',
                                    height: '100%',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    flexDirection: 'column',
                                    marginLeft: '10rem',
                                }}
                            >
                                <div className="Loading-Data-Self"></div>
                                <div className="text">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
                            </div>
                        ) : (
                            emotionPatients.map((emotion, index) => ( 
                                <div
                                    key={index}
                                    className="emoji"
                                    style={{ backgroundColor: emotion.ColorCode }}
                                    onMouseEnter={() => setHoveredEmotionID(emotion.ID ?? null)} // Use null as a fallback for undefined
                                    onMouseLeave={() => setHoveredEmotionID(null)}
                                >
                                    {emotion.Emoticon} {/* ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ */}
                                    <span>{emotion.Name}</span> {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå */}
                                    {hoveredEmotionID === emotion.ID && (
                                        <div className="hover-menu">
                                            <button
                                                onClick={(e) => {
                                                    e.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ navigate
                                                    handleSelectEmotionEdit(emotion); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                                }}
                                                style={{
                                                    color: emotion?.ColorCode,
                                                    transition: '.3s'
                                                }}
                                            >
                                                <RiEdit2Fill />
                                            </button>

                                            <button
                                                style={{
                                                    color: emotion?.ColorCode,
                                                    transition: '.3s'
                                                }}
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ)
                                                    handleDeleteEmotion(emotion.ID); 
                                                }}
                                            >
                                                <ImBin />
                                            </button>
                                        </div>
                                    )}
                                </div>
                            ))
                        )}
                    </div>
                </div>
            </div>


                <div className="bg-right" style={{ backgroundColor: selectedEmotion?.ColorCode }}> {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ */}
                    <div className="emotion-container">
                    <h2
                        style={{
                            color: selectedEmotion ? '#fff' : '#333f60', // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                            textShadow: selectedEmotion 
                                ? '1px 1px 2px rgba(192, 192, 192, 0.8)' // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                : 'none' // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                        }}
                    >
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
                    </h2>
                        <div className="emotion-card">
                        {/* Large Emoji Display */}
                        <div className="large-emoji">
                            {selectedEmotion ? (
                                <>
                                    <div className="emoji-circle">
                                        <span className="emoji-large">{selectedEmotion.Emoticon}</span>
                                    </div>
                                    <div className='nameEmotion'>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå</div> {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå */}
                                </>
                            ) : (
                                <div
                                    style={{
                                        width: '100%',
                                        height: '100%',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        flexDirection: 'column',
                                        transition: '.3s'
                                    }}
                                >
                                    <div className="Loading-Data"></div>
                                    <div className="text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥...</div>
                                </div>
                            )}
                        </div>
                        {/* Emotions Grid */}
                        <div className="emotion-grid">
                            {addEmotions.map((emotion, index) => (
                                <button
                                    key={index}
                                    className="emotion-button"
                                    style={{
                                        backgroundColor: selectedEmotion?.Emoticon === emotion.Emoticon ? '#FFFFFF' : emotion.ColorCode,
                                        transition: '.3s'
                                    }}
                                    onClick={() => handleSelectEmotion(emotion)}
                                >
                                    <span className="emoji-small">{emotion.Emoticon}</span>
                                </button>
                            ))}
                        </div>
                        {/* Create Emotion Button */}
                        <div className="create-emotion">
                        <button 
                            className="create-emotion-btn" 
                            onClick={() => setIsModalOpen(true)}
                        >
                            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
                        </button>
                        </div>
                    </div>
                </div>
                </div>
            </div>

            <Modal
                title="‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                visible={isModalOpen}
                onOk={handleAddEmotion}
                onCancel={() => setIsModalOpen(false)}
            >
                <Input
                    className='nameEmotionInput'
                    placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå..."
                    value={newEmotionLabel}
                    onChange={(e) => setNewEmotionLabel(e.target.value)}
                />
            </Modal>

            <Modal
                title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå"
                visible={isModalEditOpen}
                onOk={handleEditEmotion} // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏Å‡∏•‡∏á
                onCancel={() => setIsModalEditOpen(false)} // ‡∏õ‡∏¥‡∏î Modal
            >
                <Input
                    className='editName'
                    placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà..."
                    value={newEmotionLabel} // ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
                    onChange={(e) => setNewEmotionLabel(e.target.value)} // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
                />
            </Modal>
        </div>
        </ConfigProvider>
    );
};

export default EmotionalWeb;
